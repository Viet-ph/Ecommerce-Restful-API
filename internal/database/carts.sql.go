// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: carts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addNewItemToCart = `-- name: AddNewItemToCart :one
INSERT INTO cart_items (id, cart_id, product_id, quantity, price_at_time, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, cart_id, product_id, quantity, price_at_time, created_at, updated_at
`

type AddNewItemToCartParams struct {
	ID          uuid.UUID
	CartID      uuid.UUID
	ProductID   uuid.UUID
	Quantity    int32
	PriceAtTime string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) AddNewItemToCart(ctx context.Context, arg AddNewItemToCartParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, addNewItemToCart,
		arg.ID,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
		arg.PriceAtTime,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.PriceAtTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCartForUser = `-- name: CreateCartForUser :one
INSERT INTO carts (id, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, updated_at
`

type CreateCartForUserParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCartForUser(ctx context.Context, arg CreateCartForUserParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCartForUser,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllItemsInCart = `-- name: GetAllItemsInCart :many
SELECT ci.id, ci.cart_id, ci.product_id, ci.quantity, ci.price_at_time, ci.created_at, ci.updated_at, p.id, p.title, p.supplier, p.category, p.price, p.image_url, p.description, p.product_location, p.created_at, p.updated_at
FROM cart_items ci
JOIN products p ON ci.product_id = p.id
WHERE ci.cart_id = $1
`

type GetAllItemsInCartRow struct {
	CartItem CartItem
	Product  Product
}

func (q *Queries) GetAllItemsInCart(ctx context.Context, cartID uuid.UUID) ([]GetAllItemsInCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllItemsInCart, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllItemsInCartRow
	for rows.Next() {
		var i GetAllItemsInCartRow
		if err := rows.Scan(
			&i.CartItem.ID,
			&i.CartItem.CartID,
			&i.CartItem.ProductID,
			&i.CartItem.Quantity,
			&i.CartItem.PriceAtTime,
			&i.CartItem.CreatedAt,
			&i.CartItem.UpdatedAt,
			&i.Product.ID,
			&i.Product.Title,
			&i.Product.Supplier,
			&i.Product.Category,
			&i.Product.Price,
			&i.Product.ImageUrl,
			&i.Product.Description,
			&i.Product.ProductLocation,
			&i.Product.CreatedAt,
			&i.Product.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartValueByUserId = `-- name: GetCartValueByUserId :many
SELECT c.user_id, SUM(ci.quantity * ci.price_at_time) AS total_cart_value
FROM carts c
JOIN cart_items ci ON c.id = ci.cart_id
WHERE c.user_id = $1
GROUP BY c.user_id
`

type GetCartValueByUserIdRow struct {
	UserID         uuid.UUID
	TotalCartValue int64
}

func (q *Queries) GetCartValueByUserId(ctx context.Context, userID uuid.UUID) ([]GetCartValueByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartValueByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartValueByUserIdRow
	for rows.Next() {
		var i GetCartValueByUserIdRow
		if err := rows.Scan(&i.UserID, &i.TotalCartValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemQuantity = `-- name: UpdateItemQuantity :exec
UPDATE cart_items
SET quantity = $1 
WHERE id = $2
`

type UpdateItemQuantityParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateItemQuantity, arg.Quantity, arg.ID)
	return err
}
