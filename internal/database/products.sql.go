// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, 
                    title, 
                    supplier, 
                    category, 
                    price, 
                    image_url, 
                    description, 
                    product_location, 
                    created_at, 
                    updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, title, supplier, category, price, image_url, description, product_location, created_at, updated_at
`

type CreateProductParams struct {
	ID              uuid.UUID
	Title           string
	Supplier        string
	Category        string
	Price           string
	ImageUrl        string
	Description     string
	ProductLocation string
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Title,
		arg.Supplier,
		arg.Category,
		arg.Price,
		arg.ImageUrl,
		arg.Description,
		arg.ProductLocation,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Supplier,
		&i.Category,
		&i.Price,
		&i.ImageUrl,
		&i.Description,
		&i.ProductLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductById = `-- name: DeleteProductById :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProductById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductById, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT id, title, supplier, category, price, image_url, description, product_location, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Supplier,
		&i.Category,
		&i.Price,
		&i.ImageUrl,
		&i.Description,
		&i.ProductLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductsWithFilter = `-- name: ListProductsWithFilter :many
SELECT id, title, supplier, category, price, image_url, description, product_location, created_at, updated_at
FROM products
WHERE 
    ($1::TEXT IS NULL OR supplier = $1) AND
    ($2::TEXT IS NULL OR category = $2) AND
    ($3::TEXT IS NULL OR product_location = $3)
ORDER BY 
    CASE 
        WHEN $4::TEXT IS NULL 
            OR $4::TEXT = 'latest' THEN created_at  
        ELSE NULL
    END DESC,
    CASE 
        WHEN $4::TEXT = 'oldest' THEN created_at
        ELSE NULL 
    END ASC 
LIMIT COALESCE($5::INT, 100)
`

type ListProductsWithFilterParams struct {
	Supplier        sql.NullString
	Category        sql.NullString
	ProductLocation sql.NullString
	OrderBy         sql.NullString
	Lim             sql.NullInt32
}

func (q *Queries) ListProductsWithFilter(ctx context.Context, arg ListProductsWithFilterParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsWithFilter,
		arg.Supplier,
		arg.Category,
		arg.ProductLocation,
		arg.OrderBy,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Supplier,
			&i.Category,
			&i.Price,
			&i.ImageUrl,
			&i.Description,
			&i.ProductLocation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
