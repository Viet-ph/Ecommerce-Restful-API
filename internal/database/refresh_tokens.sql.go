// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteTokenFromDB = `-- name: DeleteTokenFromDB :exec
DELETE FROM refresh_tokens WHERE token = $1
`

func (q *Queries) DeleteTokenFromDB(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteTokenFromDB, token)
	return err
}

const getTokenDetail = `-- name: GetTokenDetail :one
SELECT id, user_id, token, expires_at, created_at, revoked FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetTokenDetail(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getTokenDetail, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Revoked,
	)
	return i, err
}

const getValidTokenByUserId = `-- name: GetValidTokenByUserId :one
SELECT id, user_id, token, expires_at, created_at, revoked FROM refresh_tokens
WHERE user_id = $1
AND revoked = FALSE
And expires_at > NOW()
`

func (q *Queries) GetValidTokenByUserId(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getValidTokenByUserId, userID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Revoked,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens SET revoked = TRUE
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}

const saveTokenToDB = `-- name: SaveTokenToDB :one
INSERT INTO refresh_tokens (id, user_id, token, expires_at, created_at, revoked)
VALUES ($1, $2, $3, $4, $5, FALSE)
RETURNING id, user_id, token, expires_at, created_at, revoked
`

type SaveTokenToDBParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
	CreatedAt time.Time
}

func (q *Queries) SaveTokenToDB(ctx context.Context, arg SaveTokenToDBParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, saveTokenToDB,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Revoked,
	)
	return i, err
}
